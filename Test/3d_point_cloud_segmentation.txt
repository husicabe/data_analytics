# For additional infos see:
# https://towardsdatascience.com/3d-data-processing-with-open3d-c3062aadc72eImporting open3d and all other necessary libraries

# For data see:
# https://sketchfab.com/3d-models/bayard-station-valve-house-6a2b26c8e2c14ba299cd96d73e8bb516

import os
import copy
import numpy as np
import pandas as pd
import open3d as o3d
from PIL import Image
from sklearn.cluster import KMeans

np.random.seed(42)

# Defining the path to the 3D model file
mesh_path = "3D_models/house.obj"

# Reading the 3D model file as a 3D mesh using open3d
mesh = o3d.io.read_triangle_mesh(mesh_path)

# Computing the normals for the mesh
mesh.compute_vertex_normals()

# Creating a mesh of the XYZ axes Cartesian coordinates frame
mesh_coord_frame = o3d.geometry.TriangleMesh.create_coordinate_frame(size=5, origin=[0, 0, 0])

# Visualizing the point cloud.
draw_geoms_list = [mesh_coord_frame, mesh]
o3d.visualization.draw_geometries(draw_geoms_list)

# Uniformly sampling of points from the mesh to convert it to a point cloud
n_pts = 100000
pcd = mesh.sample_points_uniformly(n_pts)

# Writing xyz-coordinates to data frame
df = pd.DataFrame(np.asarray(pcd.points), columns = ['x','y','z'])
df.head()

# Subset of the data frame
df_sub = df
# df_sub = df.loc[(df['z'] > np.mean(df['z']))]

# Generate a synthetic point cloud
point_cloud = np.asarray(df_sub)

# Perform k-means clustering
num_clusters = 25
kmeans_model = KMeans(n_clusters=num_clusters, random_state=0)
kmeans_model.fit(point_cloud)
labels = kmeans_model.labels_

# Generate unique colors for each label
unique_colors = np.random.rand(num_clusters, 3)

# Create a point cloud object from the numpy array
pcd = o3d.geometry.PointCloud()
pcd.points = o3d.utility.Vector3dVector(point_cloud)

# Assign colors to the point cloud based on labels
colored_points = np.array([unique_colors[label] for label in labels])
pcd.colors = o3d.utility.Vector3dVector(colored_points)

# Visualize the point cloud
o3d.visualization.draw_geometries([pcd])